
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001450  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080015f8  080015f8  000115f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016ec  080016ec  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080016ec  080016ec  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016ec  080016ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080016f4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000048  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00020004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018b3  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000056d  00000000  00000000  000218e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a8  00000000  00000000  00022030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d79  00000000  00000000  000221d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002090  00000000  00000000  00024f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bd98  00000000  00000000  00026fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00032d79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000075c  00000000  00000000  00032dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080015e0 	.word	0x080015e0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	080015e0 	.word	0x080015e0

080001e8 <GPIO_ButtonInit>:

uint8_t const buffer[] = "hihihihihihihhihiihihihiihihihihihihihhihiihihihiihihihihihihihhihiihihihiihihihihihihihhihiihihihiihihihihihihihhihiihihihiihihihihihihihhihiihihihiihihihihihihihhihiihihihiihihihihihihihhihiihihihiihihihihihihihhihiihihihiihihihihihihihhihi\n";


void GPIO_ButtonInit()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;
	memset(&GpioButton,0,sizeof(GpioButton));
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	220c      	movs	r2, #12
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 f9eb 	bl	80015d0 <memset>
	//---------------------------------------------------------------
	// GPIO Button Pin Config Init
	//---------------------------------------------------------------
	GpioButton.pGPIOx = GPIOA;
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <GPIO_ButtonInit+0x38>)
 80001fc:	607b      	str	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80001fe:	2300      	movs	r3, #0
 8000200:	723b      	strb	r3, [r7, #8]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000202:	2300      	movs	r3, #0
 8000204:	727b      	strb	r3, [r7, #9]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NPU_NPD;
 8000206:	2300      	movs	r3, #0
 8000208:	72fb      	strb	r3, [r7, #11]
	GpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_HIGH;
 800020a:	2302      	movs	r3, #2
 800020c:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&GpioButton);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f9fd 	bl	8000610 <GPIO_Init>
}
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40020000 	.word	0x40020000

08000224 <I2C1_GPIOInit>:

void I2C1_GPIOInit()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CBus;
	memset(&I2CBus,0,sizeof(I2CBus));
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	220c      	movs	r2, #12
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f001 f9cd 	bl	80015d0 <memset>


	I2CBus.pGPIOx = GPIOB;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <I2C1_GPIOInit+0x4c>)
 8000238:	607b      	str	r3, [r7, #4]
	I2CBus.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800023a:	2302      	movs	r3, #2
 800023c:	727b      	strb	r3, [r7, #9]
	I2CBus.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_OPEN_DRAIN;
 800023e:	2301      	movs	r3, #1
 8000240:	733b      	strb	r3, [r7, #12]
	I2CBus.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PULL_UP;
 8000242:	2301      	movs	r3, #1
 8000244:	72fb      	strb	r3, [r7, #11]
	I2CBus.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000246:	2304      	movs	r3, #4
 8000248:	737b      	strb	r3, [r7, #13]
	I2CBus.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OUT_SPEED_MED;
 800024a:	2301      	movs	r3, #1
 800024c:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CBus.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800024e:	2306      	movs	r3, #6
 8000250:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CBus);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f9db 	bl	8000610 <GPIO_Init>

	// SDA
	I2CBus.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800025a:	2307      	movs	r3, #7
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CBus);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f9d5 	bl	8000610 <GPIO_Init>
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40020400 	.word	0x40020400

08000274 <I2C1_Init>:

void I2C1_Init()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	memset(&I2C1Handle,0,sizeof(I2C1Handle));
 8000278:	2228      	movs	r2, #40	; 0x28
 800027a:	2100      	movs	r1, #0
 800027c:	480b      	ldr	r0, [pc, #44]	; (80002ac <I2C1_Init+0x38>)
 800027e:	f001 f9a7 	bl	80015d0 <memset>

	I2C1Handle.pI2Cx = I2C1;
 8000282:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <I2C1_Init+0x38>)
 8000284:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <I2C1_Init+0x3c>)
 8000286:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <I2C1_Init+0x38>)
 800028a:	2201      	movs	r2, #1
 800028c:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;		// doesn't matter (not slave)
 800028e:	4b07      	ldr	r3, [pc, #28]	; (80002ac <I2C1_Init+0x38>)
 8000290:	2269      	movs	r2, #105	; 0x69
 8000292:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;  // doesn't matter
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <I2C1_Init+0x38>)
 8000296:	2200      	movs	r2, #0
 8000298:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800029a:	4b04      	ldr	r3, [pc, #16]	; (80002ac <I2C1_Init+0x38>)
 800029c:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <I2C1_Init+0x40>)
 800029e:	605a      	str	r2, [r3, #4]
	I2C_Init(&I2C1Handle);
 80002a0:	4802      	ldr	r0, [pc, #8]	; (80002ac <I2C1_Init+0x38>)
 80002a2:	f000 fd9b 	bl	8000ddc <I2C_Init>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000020 	.word	0x20000020
 80002b0:	40005400 	.word	0x40005400
 80002b4:	000186a0 	.word	0x000186a0

080002b8 <main>:

int main()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	//1. Initialise GPIO button
	GPIO_ButtonInit();
 80002bc:	f7ff ff94 	bl	80001e8 <GPIO_ButtonInit>

	//2. Initialise I2C1 GPIO pins
	I2C1_GPIOInit();
 80002c0:	f7ff ffb0 	bl	8000224 <I2C1_GPIOInit>

	//3. Initialise I2C1 peripheral
	I2C1_Init();
 80002c4:	f7ff ffd6 	bl	8000274 <I2C1_Init>

	I2C_IRQInterruptConfig(IRQ_I2C1_EV, ENABLE);
 80002c8:	2101      	movs	r1, #1
 80002ca:	201f      	movs	r0, #31
 80002cc:	f000 fe54 	bl	8000f78 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_I2C1_ER, ENABLE);
 80002d0:	2101      	movs	r1, #1
 80002d2:	2020      	movs	r0, #32
 80002d4:	f000 fe50 	bl	8000f78 <I2C_IRQInterruptConfig>

	//4. Enable I2C1 peripheral
	I2C_PeripheralControl(&I2C1Handle, ENABLE);
 80002d8:	2101      	movs	r1, #1
 80002da:	4804      	ldr	r0, [pc, #16]	; (80002ec <main+0x34>)
 80002dc:	f000 fed4 	bl	8001088 <I2C_PeripheralControl>

	I2C_SlaveCallbackControl(&I2C1Handle, ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	4802      	ldr	r0, [pc, #8]	; (80002ec <main+0x34>)
 80002e4:	f000 fba0 	bl	8000a28 <I2C_SlaveCallbackControl>

	while(1)
 80002e8:	e7fe      	b.n	80002e8 <main+0x30>
 80002ea:	bf00      	nop
 80002ec:	20000020 	.word	0x20000020

080002f0 <I2C_ApplicationEventCallback>:

	return 0;
}

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t Application_Event)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]

	static uint8_t count = 0;

	static uint8_t command = 0;

	if(Application_Event == I2C_EV_TX_CMPLT)
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d051      	beq.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	{

	}else if(Application_Event == I2C_EV_RX_CMPLT)
 8000302:	78fb      	ldrb	r3, [r7, #3]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d04e      	beq.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	{

	}else if(Application_Event == I2C_EV_STOP)
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d04b      	beq.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	{

	}else if(Application_Event == I2C_ERROR_AF)
 800030e:	78fb      	ldrb	r3, [r7, #3]
 8000310:	2b05      	cmp	r3, #5
 8000312:	d10a      	bne.n	800032a <I2C_ApplicationEventCallback+0x3a>
	{
		if(command == 0x52)
 8000314:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <I2C_ApplicationEventCallback+0xc0>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b52      	cmp	r3, #82	; 0x52
 800031a:	d102      	bne.n	8000322 <I2C_ApplicationEventCallback+0x32>
			count = 0;
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <I2C_ApplicationEventCallback+0xc4>)
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
		command = 0;
 8000322:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <I2C_ApplicationEventCallback+0xc0>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
		}
	}else if(Application_Event == I2C_EV_DATA_RCV)
	{
		command = I2C_SlaveReceiveData(I2C1Handle.pI2Cx);
	}
}
 8000328:	e03d      	b.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	}else if(Application_Event == I2C_ERROR_ARLO)
 800032a:	78fb      	ldrb	r3, [r7, #3]
 800032c:	2b04      	cmp	r3, #4
 800032e:	d03a      	beq.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	}else if(Application_Event == I2C_ERROR_BERR)
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b03      	cmp	r3, #3
 8000334:	d037      	beq.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	}else if(Application_Event == I2C_ERROR_OVR)
 8000336:	78fb      	ldrb	r3, [r7, #3]
 8000338:	2b06      	cmp	r3, #6
 800033a:	d034      	beq.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	}else if(Application_Event == I2C_ERROR_TIMEOUT)
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	2b07      	cmp	r3, #7
 8000340:	d031      	beq.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	}else if(Application_Event == I2C_EV_DATA_REQ)
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	2b08      	cmp	r3, #8
 8000346:	d122      	bne.n	800038e <I2C_ApplicationEventCallback+0x9e>
		if(command == 0x51)
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <I2C_ApplicationEventCallback+0xc0>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b51      	cmp	r3, #81	; 0x51
 800034e:	d108      	bne.n	8000362 <I2C_ApplicationEventCallback+0x72>
			I2C_SlaveSendData(I2C1Handle.pI2Cx, len);
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <I2C_ApplicationEventCallback+0xc8>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a19      	ldr	r2, [pc, #100]	; (80003bc <I2C_ApplicationEventCallback+0xcc>)
 8000356:	7812      	ldrb	r2, [r2, #0]
 8000358:	4611      	mov	r1, r2
 800035a:	4618      	mov	r0, r3
 800035c:	f000 fec1 	bl	80010e2 <I2C_SlaveSendData>
}
 8000360:	e021      	b.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
		else if(command == 0x52)
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <I2C_ApplicationEventCallback+0xc0>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b52      	cmp	r3, #82	; 0x52
 8000368:	d11d      	bne.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
			I2C_SlaveSendData(I2C1Handle.pI2Cx, buffer[count]);
 800036a:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <I2C_ApplicationEventCallback+0xc8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a11      	ldr	r2, [pc, #68]	; (80003b4 <I2C_ApplicationEventCallback+0xc4>)
 8000370:	7812      	ldrb	r2, [r2, #0]
 8000372:	4611      	mov	r1, r2
 8000374:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <I2C_ApplicationEventCallback+0xd0>)
 8000376:	5c52      	ldrb	r2, [r2, r1]
 8000378:	4611      	mov	r1, r2
 800037a:	4618      	mov	r0, r3
 800037c:	f000 feb1 	bl	80010e2 <I2C_SlaveSendData>
			count++;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <I2C_ApplicationEventCallback+0xc4>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	3301      	adds	r3, #1
 8000386:	b2da      	uxtb	r2, r3
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <I2C_ApplicationEventCallback+0xc4>)
 800038a:	701a      	strb	r2, [r3, #0]
}
 800038c:	e00b      	b.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
	}else if(Application_Event == I2C_EV_DATA_RCV)
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	2b09      	cmp	r3, #9
 8000392:	d108      	bne.n	80003a6 <I2C_ApplicationEventCallback+0xb6>
		command = I2C_SlaveReceiveData(I2C1Handle.pI2Cx);
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <I2C_ApplicationEventCallback+0xc8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 feb0 	bl	80010fe <I2C_SlaveReceiveData>
 800039e:	4603      	mov	r3, r0
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <I2C_ApplicationEventCallback+0xc0>)
 80003a4:	701a      	strb	r2, [r3, #0]
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000048 	.word	0x20000048
 80003b4:	20000049 	.word	0x20000049
 80003b8:	20000020 	.word	0x20000020
 80003bc:	20000000 	.word	0x20000000
 80003c0:	080015f8 	.word	0x080015f8

080003c4 <I2C1_EV_IRQHandler>:



void I2C1_EV_IRQHandler()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80003c8:	4802      	ldr	r0, [pc, #8]	; (80003d4 <I2C1_EV_IRQHandler+0x10>)
 80003ca:	f000 fea4 	bl	8001116 <I2C_EV_IRQHandling>
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000020 	.word	0x20000020

080003d8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler()
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <I2C1_ER_IRQHandler+0x10>)
 80003de:	f001 f84d 	bl	800147c <I2C_ER_IRQHandling>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000020 	.word	0x20000020

080003ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ec:	480d      	ldr	r0, [pc, #52]	; (8000424 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	; (800042c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <LoopForever+0xe>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	; (8000438 <LoopForever+0x16>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041a:	f001 f8b5 	bl	8001588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041e:	f7ff ff4b 	bl	80002b8 <main>

08000422 <LoopForever>:

LoopForever:
    b LoopForever
 8000422:	e7fe      	b.n	8000422 <LoopForever>
  ldr   r0, =_estack
 8000424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800042c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000430:	080016f4 	.word	0x080016f4
  ldr r2, =_sbss
 8000434:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000438:	2000004c 	.word	0x2000004c

0800043c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC_IRQHandler>
	...

08000440 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 *****************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]
	if (EnorDis == ENABLE)
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d162      	bne.n	8000518 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a64      	ldr	r2, [pc, #400]	; (80005e8 <GPIO_PeriClockControl+0x1a8>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800045a:	4b64      	ldr	r3, [pc, #400]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a63      	ldr	r2, [pc, #396]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
			GPIOH_PCLK_DIS();
		else if(pGPIOx == GPIOI)
			GPIOI_PCLK_DIS();
	}
}
 8000466:	e0b9      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a61      	ldr	r2, [pc, #388]	; (80005f0 <GPIO_PeriClockControl+0x1b0>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000470:	4b5e      	ldr	r3, [pc, #376]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a5d      	ldr	r2, [pc, #372]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e0ae      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a5c      	ldr	r2, [pc, #368]	; (80005f4 <GPIO_PeriClockControl+0x1b4>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000486:	4b59      	ldr	r3, [pc, #356]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a58      	ldr	r2, [pc, #352]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	e0a3      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a58      	ldr	r2, [pc, #352]	; (80005f8 <GPIO_PeriClockControl+0x1b8>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800049c:	4b53      	ldr	r3, [pc, #332]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a52      	ldr	r2, [pc, #328]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	e098      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a53      	ldr	r2, [pc, #332]	; (80005fc <GPIO_PeriClockControl+0x1bc>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004b2:	4b4e      	ldr	r3, [pc, #312]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a4d      	ldr	r2, [pc, #308]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004b8:	f043 0310 	orr.w	r3, r3, #16
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e08d      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a4f      	ldr	r2, [pc, #316]	; (8000600 <GPIO_PeriClockControl+0x1c0>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004c8:	4b48      	ldr	r3, [pc, #288]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a47      	ldr	r2, [pc, #284]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004ce:	f043 0320 	orr.w	r3, r3, #32
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	e082      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a4a      	ldr	r2, [pc, #296]	; (8000604 <GPIO_PeriClockControl+0x1c4>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004de:	4b43      	ldr	r3, [pc, #268]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a42      	ldr	r2, [pc, #264]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ea:	e077      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a46      	ldr	r2, [pc, #280]	; (8000608 <GPIO_PeriClockControl+0x1c8>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004f4:	4b3d      	ldr	r3, [pc, #244]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a3c      	ldr	r2, [pc, #240]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80004fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	e06c      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a41      	ldr	r2, [pc, #260]	; (800060c <GPIO_PeriClockControl+0x1cc>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d168      	bne.n	80005dc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e061      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a33      	ldr	r2, [pc, #204]	; (80005e8 <GPIO_PeriClockControl+0x1a8>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DIS();
 8000520:	4b32      	ldr	r3, [pc, #200]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a31      	ldr	r2, [pc, #196]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000526:	f023 0301 	bic.w	r3, r3, #1
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052c:	e056      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a2f      	ldr	r2, [pc, #188]	; (80005f0 <GPIO_PeriClockControl+0x1b0>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DIS();
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2c      	ldr	r2, [pc, #176]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 800053c:	f023 0302 	bic.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000542:	e04b      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a2b      	ldr	r2, [pc, #172]	; (80005f4 <GPIO_PeriClockControl+0x1b4>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DIS();
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a26      	ldr	r2, [pc, #152]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000552:	f023 0304 	bic.w	r3, r3, #4
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	e040      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a26      	ldr	r2, [pc, #152]	; (80005f8 <GPIO_PeriClockControl+0x1b8>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DIS();
 8000562:	4b22      	ldr	r3, [pc, #136]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a21      	ldr	r2, [pc, #132]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000568:	f023 0308 	bic.w	r3, r3, #8
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056e:	e035      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a22      	ldr	r2, [pc, #136]	; (80005fc <GPIO_PeriClockControl+0x1bc>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DIS();
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 800057e:	f023 0310 	bic.w	r3, r3, #16
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	e02a      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <GPIO_PeriClockControl+0x1c0>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d106      	bne.n	800059c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DIS();
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 8000594:	f023 0320 	bic.w	r3, r3, #32
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059a:	e01f      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a19      	ldr	r2, [pc, #100]	; (8000604 <GPIO_PeriClockControl+0x1c4>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DIS();
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80005aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b0:	e014      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <GPIO_PeriClockControl+0x1c8>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DIS();
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80005c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c6:	e009      	b.n	80005dc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <GPIO_PeriClockControl+0x1cc>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d105      	bne.n	80005dc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DIS();
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a05      	ldr	r2, [pc, #20]	; (80005ec <GPIO_PeriClockControl+0x1ac>)
 80005d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40020000 	.word	0x40020000
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020400 	.word	0x40020400
 80005f4:	40020800 	.word	0x40020800
 80005f8:	40020c00 	.word	0x40020c00
 80005fc:	40021000 	.word	0x40021000
 8000600:	40021400 	.word	0x40021400
 8000604:	40021800 	.word	0x40021800
 8000608:	40021c00 	.word	0x40021c00
 800060c:	40022000 	.word	0x40022000

08000610 <GPIO_Init>:
 * @return            -  none
 *
 * @Note              -  none
 *****************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000614:	b092      	sub	sp, #72	; 0x48
 8000616:	af00      	add	r7, sp, #0
 8000618:	6378      	str	r0, [r7, #52]	; 0x34
	uint64_t temp = 0;
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//0. Enable peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 8000626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2101      	movs	r1, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff07 	bl	8000440 <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d825      	bhi.n	8000686 <GPIO_Init+0x76>
	{
		// Non Interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800063c:	795b      	ldrb	r3, [r3, #5]
 800063e:	461a      	mov	r2, r3
 8000640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	17da      	asrs	r2, r3, #31
 800064c:	461c      	mov	r4, r3
 800064e:	4615      	mov	r5, r2
 8000650:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	005a      	lsls	r2, r3, #1
 8000660:	2303      	movs	r3, #3
 8000662:	4093      	lsls	r3, r2
 8000664:	43db      	mvns	r3, r3
 8000666:	4619      	mov	r1, r3
 8000668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	ea00 0301 	and.w	r3, r0, r1
 8000670:	6013      	str	r3, [r2, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800067a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	ea40 0301 	orr.w	r3, r0, r1
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	e0ea      	b.n	800085c <GPIO_Init+0x24c>
	}else
	{
		// Interrupt mode (To be done later)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_FALL)
 8000686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	2b04      	cmp	r3, #4
 800068c:	d115      	bne.n	80006ba <GPIO_Init+0xaa>
		{
			//Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068e:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <GPIO_Init+0x1d8>)
 8000690:	68d9      	ldr	r1, [r3, #12]
 8000692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	461a      	mov	r2, r3
 8000698:	2301      	movs	r3, #1
 800069a:	4093      	lsls	r3, r2
 800069c:	4a52      	ldr	r2, [pc, #328]	; (80007e8 <GPIO_Init+0x1d8>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	60d3      	str	r3, [r2, #12]
			//Clear the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a2:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <GPIO_Init+0x1d8>)
 80006a4:	6899      	ldr	r1, [r3, #8]
 80006a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	461a      	mov	r2, r3
 80006ac:	2301      	movs	r3, #1
 80006ae:	4093      	lsls	r3, r2
 80006b0:	43db      	mvns	r3, r3
 80006b2:	4a4d      	ldr	r2, [pc, #308]	; (80007e8 <GPIO_Init+0x1d8>)
 80006b4:	400b      	ands	r3, r1
 80006b6:	6093      	str	r3, [r2, #8]
 80006b8:	e031      	b.n	800071e <GPIO_Init+0x10e>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_RISE)
 80006ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	2b05      	cmp	r3, #5
 80006c0:	d115      	bne.n	80006ee <GPIO_Init+0xde>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c2:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <GPIO_Init+0x1d8>)
 80006c4:	6899      	ldr	r1, [r3, #8]
 80006c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	461a      	mov	r2, r3
 80006cc:	2301      	movs	r3, #1
 80006ce:	4093      	lsls	r3, r2
 80006d0:	4a45      	ldr	r2, [pc, #276]	; (80007e8 <GPIO_Init+0x1d8>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6093      	str	r3, [r2, #8]
			//Clear the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d6:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <GPIO_Init+0x1d8>)
 80006d8:	68d9      	ldr	r1, [r3, #12]
 80006da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	461a      	mov	r2, r3
 80006e0:	2301      	movs	r3, #1
 80006e2:	4093      	lsls	r3, r2
 80006e4:	43db      	mvns	r3, r3
 80006e6:	4a40      	ldr	r2, [pc, #256]	; (80007e8 <GPIO_Init+0x1d8>)
 80006e8:	400b      	ands	r3, r1
 80006ea:	60d3      	str	r3, [r2, #12]
 80006ec:	e017      	b.n	800071e <GPIO_Init+0x10e>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INT_FALL_RISE)
 80006ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d113      	bne.n	800071e <GPIO_Init+0x10e>
		{
			//1. Configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f6:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <GPIO_Init+0x1d8>)
 80006f8:	6899      	ldr	r1, [r3, #8]
 80006fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	461a      	mov	r2, r3
 8000700:	2301      	movs	r3, #1
 8000702:	4093      	lsls	r3, r2
 8000704:	4a38      	ldr	r2, [pc, #224]	; (80007e8 <GPIO_Init+0x1d8>)
 8000706:	430b      	orrs	r3, r1
 8000708:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800070a:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <GPIO_Init+0x1d8>)
 800070c:	68d9      	ldr	r1, [r3, #12]
 800070e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	461a      	mov	r2, r3
 8000714:	2301      	movs	r3, #1
 8000716:	4093      	lsls	r3, r2
 8000718:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <GPIO_Init+0x1d8>)
 800071a:	430b      	orrs	r3, r1
 800071c:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		SYSCFG_PCLK_EN();
 800071e:	4b33      	ldr	r3, [pc, #204]	; (80007ec <GPIO_Init+0x1dc>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a32      	ldr	r2, [pc, #200]	; (80007ec <GPIO_Init+0x1dc>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800072a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	089b      	lsrs	r3, r3, #2
 8000730:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	f003 0303 	and.w	r3, r3, #3
 800073c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 8000740:	4a2b      	ldr	r2, [pc, #172]	; (80007f0 <GPIO_Init+0x1e0>)
 8000742:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000746:	3302      	adds	r3, #2
 8000748:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800074c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000750:	009a      	lsls	r2, r3, #2
 8000752:	230f      	movs	r3, #15
 8000754:	4093      	lsls	r3, r2
 8000756:	43db      	mvns	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	4925      	ldr	r1, [pc, #148]	; (80007f0 <GPIO_Init+0x1e0>)
 800075c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000760:	4002      	ands	r2, r0
 8000762:	3302      	adds	r3, #2
 8000764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <GPIO_Init+0x1e4>)
 800076e:	429a      	cmp	r2, r3
 8000770:	d052      	beq.n	8000818 <GPIO_Init+0x208>
 8000772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <GPIO_Init+0x1e8>)
 8000778:	429a      	cmp	r2, r3
 800077a:	d032      	beq.n	80007e2 <GPIO_Init+0x1d2>
 800077c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <GPIO_Init+0x1ec>)
 8000782:	429a      	cmp	r2, r3
 8000784:	d02b      	beq.n	80007de <GPIO_Init+0x1ce>
 8000786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <GPIO_Init+0x1f0>)
 800078c:	429a      	cmp	r2, r3
 800078e:	d024      	beq.n	80007da <GPIO_Init+0x1ca>
 8000790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <GPIO_Init+0x1f4>)
 8000796:	429a      	cmp	r2, r3
 8000798:	d01d      	beq.n	80007d6 <GPIO_Init+0x1c6>
 800079a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <GPIO_Init+0x1f8>)
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d016      	beq.n	80007d2 <GPIO_Init+0x1c2>
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <GPIO_Init+0x1fc>)
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d00f      	beq.n	80007ce <GPIO_Init+0x1be>
 80007ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <GPIO_Init+0x200>)
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d008      	beq.n	80007ca <GPIO_Init+0x1ba>
 80007b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <GPIO_Init+0x204>)
 80007be:	429a      	cmp	r2, r3
 80007c0:	d101      	bne.n	80007c6 <GPIO_Init+0x1b6>
 80007c2:	2308      	movs	r3, #8
 80007c4:	e029      	b.n	800081a <GPIO_Init+0x20a>
 80007c6:	2300      	movs	r3, #0
 80007c8:	e027      	b.n	800081a <GPIO_Init+0x20a>
 80007ca:	2307      	movs	r3, #7
 80007cc:	e025      	b.n	800081a <GPIO_Init+0x20a>
 80007ce:	2306      	movs	r3, #6
 80007d0:	e023      	b.n	800081a <GPIO_Init+0x20a>
 80007d2:	2305      	movs	r3, #5
 80007d4:	e021      	b.n	800081a <GPIO_Init+0x20a>
 80007d6:	2304      	movs	r3, #4
 80007d8:	e01f      	b.n	800081a <GPIO_Init+0x20a>
 80007da:	2303      	movs	r3, #3
 80007dc:	e01d      	b.n	800081a <GPIO_Init+0x20a>
 80007de:	2302      	movs	r3, #2
 80007e0:	e01b      	b.n	800081a <GPIO_Init+0x20a>
 80007e2:	2301      	movs	r3, #1
 80007e4:	e019      	b.n	800081a <GPIO_Init+0x20a>
 80007e6:	bf00      	nop
 80007e8:	40013c00 	.word	0x40013c00
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40013800 	.word	0x40013800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020c00 	.word	0x40020c00
 8000804:	40021000 	.word	0x40021000
 8000808:	40021400 	.word	0x40021400
 800080c:	40021800 	.word	0x40021800
 8000810:	40021c00 	.word	0x40021c00
 8000814:	40022000 	.word	0x40022000
 8000818:	2300      	movs	r3, #0
 800081a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 800081e:	4a80      	ldr	r2, [pc, #512]	; (8000a20 <GPIO_Init+0x410>)
 8000820:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000824:	3302      	adds	r3, #2
 8000826:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800082a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800082e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	461a      	mov	r2, r3
 800083a:	4979      	ldr	r1, [pc, #484]	; (8000a20 <GPIO_Init+0x410>)
 800083c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000840:	4302      	orrs	r2, r0
 8000842:	3302      	adds	r3, #2
 8000844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000848:	4b76      	ldr	r3, [pc, #472]	; (8000a24 <GPIO_Init+0x414>)
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800084e:	791b      	ldrb	r3, [r3, #4]
 8000850:	461a      	mov	r2, r3
 8000852:	2301      	movs	r3, #1
 8000854:	4093      	lsls	r3, r2
 8000856:	4a73      	ldr	r2, [pc, #460]	; (8000a24 <GPIO_Init+0x414>)
 8000858:	430b      	orrs	r3, r1
 800085a:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800085c:	f04f 0200 	mov.w	r2, #0
 8000860:	f04f 0300 	mov.w	r3, #0
 8000864:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086a:	799b      	ldrb	r3, [r3, #6]
 800086c:	461a      	mov	r2, r3
 800086e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	17da      	asrs	r2, r3, #31
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	617a      	str	r2, [r7, #20]
 800087e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000882:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	6898      	ldr	r0, [r3, #8]
 800088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	005a      	lsls	r2, r3, #1
 8000892:	2303      	movs	r3, #3
 8000894:	4093      	lsls	r3, r2
 8000896:	43db      	mvns	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	ea00 0301 	and.w	r3, r0, r1
 80008a2:	6093      	str	r3, [r2, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6898      	ldr	r0, [r3, #8]
 80008aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80008ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	ea40 0301 	orr.w	r3, r0, r1
 80008b4:	6093      	str	r3, [r2, #8]
	temp = 0;
 80008b6:	f04f 0200 	mov.w	r2, #0
 80008ba:	f04f 0300 	mov.w	r3, #0
 80008be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c4:	79db      	ldrb	r3, [r3, #7]
 80008c6:	461a      	mov	r2, r3
 80008c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	17da      	asrs	r2, r3, #31
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	60fa      	str	r2, [r7, #12]
 80008d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80008dc:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68d8      	ldr	r0, [r3, #12]
 80008e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	005a      	lsls	r2, r3, #1
 80008ec:	2303      	movs	r3, #3
 80008ee:	4093      	lsls	r3, r2
 80008f0:	43db      	mvns	r3, r3
 80008f2:	4619      	mov	r1, r3
 80008f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	ea00 0301 	and.w	r3, r0, r1
 80008fc:	60d3      	str	r3, [r2, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68d8      	ldr	r0, [r3, #12]
 8000904:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	ea40 0301 	orr.w	r3, r0, r1
 800090e:	60d3      	str	r3, [r2, #12]
	temp = 0;
 8000910:	f04f 0200 	mov.w	r2, #0
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//4. Configure the OPType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800091c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800091e:	7a1b      	ldrb	r3, [r3, #8]
 8000920:	461a      	mov	r2, r3
 8000922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	17da      	asrs	r2, r3, #31
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000934:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	4619      	mov	r1, r3
 8000944:	2301      	movs	r3, #1
 8000946:	408b      	lsls	r3, r1
 8000948:	43db      	mvns	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	400a      	ands	r2, r1
 8000952:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6859      	ldr	r1, [r3, #4]
 800095a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800095c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	430a      	orrs	r2, r1
 8000962:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000964:	f04f 0200 	mov.w	r2, #0
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//5. Configure the Alt Functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d14d      	bne.n	8000a14 <GPIO_Init+0x404>
	{
		//Configure the alt func registers
		temp = ((uint64_t)pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800097a:	7a5b      	ldrb	r3, [r3, #9]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2200      	movs	r2, #0
 8000980:	469a      	mov	sl, r3
 8000982:	4693      	mov	fp, r2
 8000984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	f1a3 0120 	sub.w	r1, r3, #32
 800098e:	f1c3 0220 	rsb	r2, r3, #32
 8000992:	fa0b f903 	lsl.w	r9, fp, r3
 8000996:	fa0a f101 	lsl.w	r1, sl, r1
 800099a:	ea49 0901 	orr.w	r9, r9, r1
 800099e:	fa2a f202 	lsr.w	r2, sl, r2
 80009a2:	ea49 0902 	orr.w	r9, r9, r2
 80009a6:	fa0a f803 	lsl.w	r8, sl, r3
 80009aa:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
		pGPIOHandle->pGPIOx->AFR &= ~(0xF << (4 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80009b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80009b8:	7909      	ldrb	r1, [r1, #4]
 80009ba:	0089      	lsls	r1, r1, #2
 80009bc:	200f      	movs	r0, #15
 80009be:	fa00 f101 	lsl.w	r1, r0, r1
 80009c2:	43c9      	mvns	r1, r1
 80009c4:	17c8      	asrs	r0, r1, #31
 80009c6:	62b9      	str	r1, [r7, #40]	; 0x28
 80009c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80009ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80009cc:	6809      	ldr	r1, [r1, #0]
 80009ce:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80009d2:	4620      	mov	r0, r4
 80009d4:	4010      	ands	r0, r2
 80009d6:	6238      	str	r0, [r7, #32]
 80009d8:	4628      	mov	r0, r5
 80009da:	4018      	ands	r0, r3
 80009dc:	6278      	str	r0, [r7, #36]	; 0x24
 80009de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80009e2:	e9c1 3408 	strd	r3, r4, [r1, #32]
		pGPIOHandle->pGPIOx->AFR |= temp;
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80009ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80009f6:	ea40 0502 	orr.w	r5, r0, r2
 80009fa:	61bd      	str	r5, [r7, #24]
 80009fc:	430b      	orrs	r3, r1
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a04:	e9c4 2308 	strd	r2, r3, [r4, #32]
		temp = 0;
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	f04f 0300 	mov.w	r3, #0
 8000a10:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	}
}
 8000a14:	bf00      	nop
 8000a16:	3748      	adds	r7, #72	; 0x48
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000a1e:	bf00      	nop
 8000a20:	40013800 	.word	0x40013800
 8000a24:	40013c00 	.word	0x40013c00

08000a28 <I2C_SlaveCallbackControl>:
 */

#include "stm32f407xx_i2c_driver.h"

void I2C_SlaveCallbackControl(I2C_Handle_t *pI2CHandle, uint8_t EnorDis)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == ENABLE)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d11c      	bne.n	8000a74 <I2C_SlaveCallbackControl+0x4c>
	{
		// Enable Event, Error and Buffer interrupts
		pI2CHandle->pI2Cx->I2C_CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a48:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->I2C_CR2 |= (1 << I2C_CR2_ITERREN);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a58:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->I2C_CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a68:	605a      	str	r2, [r3, #4]
		pI2CHandle->Mode = I2C_MODE_SLAVE;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		pI2CHandle->pI2Cx->I2C_CR2 &= (1 << I2C_CR2_ITEVTEN);
		pI2CHandle->pI2Cx->I2C_CR2 &= (1 << I2C_CR2_ITERREN);
		pI2CHandle->pI2Cx->I2C_CR2 &= (1 << I2C_CR2_ITBUFEN);
		pI2CHandle->Mode = I2C_MODE_MASTER;
	}
}
 8000a72:	e01e      	b.n	8000ab2 <I2C_SlaveCallbackControl+0x8a>
	else if(EnorDis == DISABLE)
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d11b      	bne.n	8000ab2 <I2C_SlaveCallbackControl+0x8a>
		pI2CHandle->pI2Cx->I2C_CR2 &= (1 << I2C_CR2_ITEVTEN);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000a88:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->I2C_CR2 &= (1 << I2C_CR2_ITERREN);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000a98:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->I2C_CR2 &= (1 << I2C_CR2_ITBUFEN);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000aa8:	605a      	str	r2, [r3, #4]
		pI2CHandle->Mode = I2C_MODE_MASTER;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2201      	movs	r2, #1
 8000aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <I2C_ManageAcking>:

void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);

static void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDis)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == ENABLE)
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d106      	bne.n	8000adc <I2C_ManageAcking+0x20>
		pI2Cx->I2C_CR1 |= (1 << I2C_CR1_ACK);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
	else if(EnorDis == DISABLE)
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
}
 8000ada:	e008      	b.n	8000aee <I2C_ManageAcking+0x32>
	else if(EnorDis == DISABLE)
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d105      	bne.n	8000aee <I2C_ManageAcking+0x32>
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_ACK);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	70fb      	strb	r3, [r7, #3]
	pI2Cx->I2C_DR = SlaveAddr;
 8000b12:	78fa      	ldrb	r2, [r7, #3]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	611a      	str	r2, [r3, #16]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	f023 0301 	bic.w	r3, r3, #1
 8000b3a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->I2C_DR = SlaveAddr;
 8000b3c:	78fa      	ldrb	r2, [r7, #3]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	611a      	str	r2, [r3, #16]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <I2C_CLearADDRFLag>:

static void I2C_CLearADDRFLag(I2C_Handle_t *pI2CHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	//check for device mode
	if (pI2CHandle->pI2Cx->I2C_SR2 & (1 << I2C_SR2_MSL))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d020      	beq.n	8000ba4 <I2C_CLearADDRFLag+0x58>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX && pI2CHandle->RxSize == 1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7f1b      	ldrb	r3, [r3, #28]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d113      	bne.n	8000b92 <I2C_CLearADDRFLag+0x46>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a1b      	ldr	r3, [r3, #32]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d10f      	bne.n	8000b92 <I2C_CLearADDRFLag+0x46>
		{
			//first disable the ACKing and then clear the ADDR flag
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff9f 	bl	8000abc <I2C_ManageAcking>

			//CLear ADDR flag (Read SR1 and SR2)
			dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	60fb      	str	r3, [r7, #12]
			(void)dummyRead;
 8000b8e:	bf00      	nop
		//CLear ADDR flag (Read SR1 and SR2)
		dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
		dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
		(void)dummyRead;
	}
}
 8000b90:	e010      	b.n	8000bb4 <I2C_CLearADDRFLag+0x68>
			dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	60fb      	str	r3, [r7, #12]
}
 8000ba2:	e007      	b.n	8000bb4 <I2C_CLearADDRFLag+0x68>
		dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	60fb      	str	r3, [r7, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control bit
	pI2CHandle->pI2Cx->I2C_CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bd2:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVTEN Control bit
	pI2CHandle->pI2Cx->I2C_CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000be2:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control bit
	pI2CHandle->pI2Cx->I2C_CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c16:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVTEN Control bit
	pI2CHandle->pI2Cx->I2C_CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c26:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7a5b      	ldrb	r3, [r3, #9]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d105      	bne.n	8000c54 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff34 	bl	8000abc <I2C_ManageAcking>
	}
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <RCC_GetPCLK1Value>:

//uint32_t RCC_GetPLLOutputClock(){} //TBD

uint32_t RCC_GetPCLK1Value()
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
	uint8_t clksource;
	uint8_t AHBPrescaler;
	uint8_t APB1Prescaler;

	uint32_t SystemClk = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
	uint32_t AHBClock;
	uint32_t APB1Clock;

	clksource = ((RCC->CFGR >> 2) & 0x3);
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <RCC_GetPCLK1Value+0xc4>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	70fb      	strb	r3, [r7, #3]

	AHBPrescaler = ((RCC->CFGR >> 4) & 0xF);
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <RCC_GetPCLK1Value+0xc4>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f003 030f 	and.w	r3, r3, #15
 8000c80:	70bb      	strb	r3, [r7, #2]
	APB1Prescaler = ((RCC->CFGR >> 10) & 7);
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <RCC_GetPCLK1Value+0xc4>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	0a9b      	lsrs	r3, r3, #10
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	707b      	strb	r3, [r7, #1]

	if(clksource == 0)
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d102      	bne.n	8000c9c <RCC_GetPCLK1Value+0x40>
		SystemClk = 16000000;
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <RCC_GetPCLK1Value+0xc8>)
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	e004      	b.n	8000ca6 <RCC_GetPCLK1Value+0x4a>
	else if(clksource == 1)
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <RCC_GetPCLK1Value+0x4a>
		SystemClk = 8000000;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <RCC_GetPCLK1Value+0xcc>)
 8000ca4:	60fb      	str	r3, [r7, #12]
	//else if(clksource == 2)
		//SystemClk = RCC_GetPLLOutputClock(); //TBD

	if (!(AHBPrescaler & 8))
 8000ca6:	78bb      	ldrb	r3, [r7, #2]
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11c      	bne.n	8000cea <RCC_GetPCLK1Value+0x8e>
	{
		if((AHBPrescaler & 7) < 4)
 8000cb0:	78bb      	ldrb	r3, [r7, #2]
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10b      	bne.n	8000cd2 <RCC_GetPCLK1Value+0x76>
			AHBClock = SystemClk / (2^((AHBPrescaler & 7)+1));
 8000cba:	78bb      	ldrb	r3, [r7, #2]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	f083 0302 	eor.w	r3, r3, #2
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	e00d      	b.n	8000cee <RCC_GetPCLK1Value+0x92>
		else
			AHBClock = SystemClk / (2^((AHBPrescaler & 7)+2));
 8000cd2:	78bb      	ldrb	r3, [r7, #2]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	3302      	adds	r3, #2
 8000cda:	f083 0302 	eor.w	r3, r3, #2
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	e001      	b.n	8000cee <RCC_GetPCLK1Value+0x92>
	}
	else
		AHBClock = SystemClk;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	60bb      	str	r3, [r7, #8]


	if (!(APB1Prescaler & 4))
 8000cee:	787b      	ldrb	r3, [r7, #1]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10b      	bne.n	8000d10 <RCC_GetPCLK1Value+0xb4>
	{
		APB1Clock = AHBClock / (2^((APB1Prescaler & 3)+1));
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	f083 0302 	eor.w	r3, r3, #2
 8000d04:	461a      	mov	r2, r3
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	e001      	b.n	8000d14 <RCC_GetPCLK1Value+0xb8>
	}
	else
		APB1Clock = AHBClock;
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	607b      	str	r3, [r7, #4]

	return APB1Clock;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40023800 	.word	0x40023800
 8000d24:	00f42400 	.word	0x00f42400
 8000d28:	007a1200 	.word	0x007a1200

08000d2c <I2C_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 *****************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDis)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
	if (EnorDis == ENABLE)
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d120      	bne.n	8000d80 <I2C_PeriClockControl+0x54>
	{
		if (pI2Cx == I2C1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <I2C_PeriClockControl+0xa0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d106      	bne.n	8000d54 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C2)
			I2C2_PCLK_DIS();
		else if (pI2Cx == I2C3)
			I2C3_PCLK_DIS();
	}
}
 8000d52:	e035      	b.n	8000dc0 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a1f      	ldr	r2, [pc, #124]	; (8000dd4 <I2C_PeriClockControl+0xa8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d106      	bne.n	8000d6a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000d62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d68:	e02a      	b.n	8000dc0 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <I2C_PeriClockControl+0xac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d126      	bne.n	8000dc0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000d78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d7e:	e01f      	b.n	8000dc0 <I2C_PeriClockControl+0x94>
		if (pI2Cx == I2C1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <I2C_PeriClockControl+0xa0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d106      	bne.n	8000d96 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DIS();
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000d8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d94:	e014      	b.n	8000dc0 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <I2C_PeriClockControl+0xa8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d106      	bne.n	8000dac <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DIS();
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000da4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000daa:	e009      	b.n	8000dc0 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <I2C_PeriClockControl+0xac>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d105      	bne.n	8000dc0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DIS();
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <I2C_PeriClockControl+0xa4>)
 8000dba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40005800 	.word	0x40005800
 8000dd8:	40005c00 	.word	0x40005c00

08000ddc <I2C_Init>:
 * @return            -  none
 *
 * @Note              -  none
 *****************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	//uint32_t tempregCR1 = 0;
	uint32_t tempregCR2 = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
	uint32_t tempregOAR1 = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
	uint32_t tempregCCR = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
	uint32_t tempregTRISE = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
	//0. Enable peripheral clock
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff96 	bl	8000d2c <I2C_PeriClockControl>

	//1. Configure the mode (standard or fast)

	//2. Configure the speed of the serial clock (SCL)
		//FREQ
	tempregCR2  |= (((RCC_GetPCLK1Value()/1000000) & 0x3F) << I2C_CR2_FREQ);
 8000e00:	f7ff ff2c 	bl	8000c5c <RCC_GetPCLK1Value>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4a48      	ldr	r2, [pc, #288]	; (8000f28 <I2C_Init+0x14c>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	0c9b      	lsrs	r3, r3, #18
 8000e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
		//CCR
	uint16_t ccrvalue = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	82fb      	strh	r3, [r7, #22]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a42      	ldr	r2, [pc, #264]	; (8000f2c <I2C_Init+0x150>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d809      	bhi.n	8000e3a <I2C_Init+0x5e>
		// Standard mode
		// T(high,SCL) = CCR * T(APB1CLK)
		// T(low,SCL) = CCR * T(APB1CLK)
		// T(SCL) = 2CCR * T(APB1CLK)
		// CCR = T(SCL) / (2*T(APB1CLK))  --> CCR = Freq(APB1CLK) / (2*Freq(SCL))
		ccrvalue = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e26:	f7ff ff19 	bl	8000c5c <RCC_GetPCLK1Value>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	82fb      	strh	r3, [r7, #22]
 8000e38:	e02b      	b.n	8000e92 <I2C_Init+0xb6>
	}
	else
	{
		// Fast mode
		tempregOAR1 |= (1 << 15);
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e40:	61fb      	str	r3, [r7, #28]
		tempregOAR1 |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7a9b      	ldrb	r3, [r3, #10]
 8000e46:	039b      	lsls	r3, r3, #14
 8000e48:	461a      	mov	r2, r3
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61fb      	str	r3, [r7, #28]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7a9b      	ldrb	r3, [r3, #10]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10b      	bne.n	8000e70 <I2C_Init+0x94>
			ccrvalue = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e58:	f7ff ff00 	bl	8000c5c <RCC_GetPCLK1Value>
 8000e5c:	4601      	mov	r1, r0
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e6c:	82fb      	strh	r3, [r7, #22]
 8000e6e:	e010      	b.n	8000e92 <I2C_Init+0xb6>
		else if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_16_9)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7a9b      	ldrb	r3, [r3, #10]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d10c      	bne.n	8000e92 <I2C_Init+0xb6>
			ccrvalue = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000e78:	f7ff fef0 	bl	8000c5c <RCC_GetPCLK1Value>
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e90:	82fb      	strh	r3, [r7, #22]
	}
	tempregCCR |= (ccrvalue & 0xFFF);
 8000e92:	8afb      	ldrh	r3, [r7, #22]
 8000e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]

	//3. Configure the device address (applicable when the device is a slave)
	tempregOAR1 |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << 1);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7a1b      	ldrb	r3, [r3, #8]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61fb      	str	r3, [r7, #28]
	tempregOAR1 |= (1 << 14); // Unusual, one bit of reserved bits must be kept at 1 by software
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	61fb      	str	r3, [r7, #28]

	//4. Enable the Acking (acknowledgement) !!!NEEDS to be done after PE = 1!!!
	//tempregCR1  |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);

	//5. Configure the rise time for I2C pins
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <I2C_Init+0x150>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d80b      	bhi.n	8000ed6 <I2C_Init+0xfa>
	{
	tempregTRISE |= (RCC_GetPCLK1Value()/1000000) + 1;
 8000ebe:	f7ff fecd 	bl	8000c5c <RCC_GetPCLK1Value>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <I2C_Init+0x14c>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0c9b      	lsrs	r3, r3, #18
 8000ecc:	3301      	adds	r3, #1
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	e00f      	b.n	8000ef6 <I2C_Init+0x11a>
	}
	else
	{
	tempregTRISE |= ((RCC_GetPCLK1Value()*300) / 1000000000) + 1;
 8000ed6:	f7ff fec1 	bl	8000c5c <RCC_GetPCLK1Value>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ee0:	fb02 f303 	mul.w	r3, r2, r3
 8000ee4:	0a5b      	lsrs	r3, r3, #9
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <I2C_Init+0x154>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	09db      	lsrs	r3, r3, #7
 8000eee:	3301      	adds	r3, #1
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
	}
	tempregTRISE &= 0x3F;
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000efc:	61bb      	str	r3, [r7, #24]


	//6. Initialise all temp registers
	pI2CHandle->pI2Cx->I2C_CR2 = tempregCR2;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->I2C_OAR1 = tempregOAR1;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->I2C_CCR = tempregCCR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	61da      	str	r2, [r3, #28]
	pI2CHandle->pI2Cx->I2C_TRISE = tempregTRISE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	621a      	str	r2, [r3, #32]
}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	431bde83 	.word	0x431bde83
 8000f2c:	000186a0 	.word	0x000186a0
 8000f30:	00044b83 	.word	0x00044b83

08000f34 <I2C_GetFLagStatus>:
	else if(pI2Cx == I2C3)
		I2C3_REG_RESET();
}

uint8_t I2C_GetFLagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	if (pI2Cx->I2C_SR1 & FlagName)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <I2C_GetFLagStatus+0x1a>
		return FLAG_SET;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <I2C_GetFLagStatus+0x1c>
	else
		return FLAG_RESET;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <I2C_GenerateStopCondition>:
{
	pI2Cx->I2C_CR1 |= (1 << I2C_CR1_START);
}

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= (1 << I2C_CR1_STOP);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	601a      	str	r2, [r3, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <I2C_IRQInterruptConfig>:
 * @return            - none
 *
 * @Note              - none
 *****************************************************************************************************/
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDis)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
	if(EnorDis == ENABLE)
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d133      	bne.n	8000ff6 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b1f      	cmp	r3, #31
 8000f92:	d80a      	bhi.n	8000faa <I2C_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000f94:	4b36      	ldr	r3, [pc, #216]	; (8001070 <I2C_IRQInterruptConfig+0xf8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	79fa      	ldrb	r2, [r7, #7]
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4a33      	ldr	r2, [pc, #204]	; (8001070 <I2C_IRQInterruptConfig+0xf8>)
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}

}
 8000fa8:	e05c      	b.n	8001064 <I2C_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 32 && IRQNumber <= 63)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b1f      	cmp	r3, #31
 8000fae:	d90f      	bls.n	8000fd0 <I2C_IRQInterruptConfig+0x58>
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fb4:	d80c      	bhi.n	8000fd0 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <I2C_IRQInterruptConfig+0xfc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	f002 021f 	and.w	r2, r2, #31
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <I2C_IRQInterruptConfig+0xfc>)
 8000fca:	430b      	orrs	r3, r1
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e049      	b.n	8001064 <I2C_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber <= 95)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd4:	d946      	bls.n	8001064 <I2C_IRQInterruptConfig+0xec>
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b5f      	cmp	r3, #95	; 0x5f
 8000fda:	d843      	bhi.n	8001064 <I2C_IRQInterruptConfig+0xec>
			*NVIC_ISER2 |= (1 << IRQNumber  % 64);
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <I2C_IRQInterruptConfig+0x100>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	4611      	mov	r1, r2
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <I2C_IRQInterruptConfig+0x100>)
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	e036      	b.n	8001064 <I2C_IRQInterruptConfig+0xec>
	else if(EnorDis == DISABLE)
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d133      	bne.n	8001064 <I2C_IRQInterruptConfig+0xec>
		if(IRQNumber <= 31)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b1f      	cmp	r3, #31
 8001000:	d80a      	bhi.n	8001018 <I2C_IRQInterruptConfig+0xa0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <I2C_IRQInterruptConfig+0x104>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	4611      	mov	r1, r2
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <I2C_IRQInterruptConfig+0x104>)
 8001012:	430b      	orrs	r3, r1
 8001014:	6013      	str	r3, [r2, #0]
}
 8001016:	e025      	b.n	8001064 <I2C_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 32 && IRQNumber <= 63)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b1f      	cmp	r3, #31
 800101c:	d90f      	bls.n	800103e <I2C_IRQInterruptConfig+0xc6>
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b3f      	cmp	r3, #63	; 0x3f
 8001022:	d80c      	bhi.n	800103e <I2C_IRQInterruptConfig+0xc6>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <I2C_IRQInterruptConfig+0x108>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	79fa      	ldrb	r2, [r7, #7]
 800102a:	f002 021f 	and.w	r2, r2, #31
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f202 	lsl.w	r2, r1, r2
 8001034:	4611      	mov	r1, r2
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <I2C_IRQInterruptConfig+0x108>)
 8001038:	430b      	orrs	r3, r1
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e012      	b.n	8001064 <I2C_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber <= 95)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b3f      	cmp	r3, #63	; 0x3f
 8001042:	d90f      	bls.n	8001064 <I2C_IRQInterruptConfig+0xec>
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b5f      	cmp	r3, #95	; 0x5f
 8001048:	d80c      	bhi.n	8001064 <I2C_IRQInterruptConfig+0xec>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <I2C_IRQInterruptConfig+0x10c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	4611      	mov	r1, r2
 800105c:	4a09      	ldr	r2, [pc, #36]	; (8001084 <I2C_IRQInterruptConfig+0x10c>)
 800105e:	430b      	orrs	r3, r1
 8001060:	6013      	str	r3, [r2, #0]
}
 8001062:	e7ff      	b.n	8001064 <I2C_IRQInterruptConfig+0xec>
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000e104 	.word	0xe000e104
 8001078:	e000e108 	.word	0xe000e108
 800107c:	e000e180 	.word	0xe000e180
 8001080:	e000e184 	.word	0xe000e184
 8001084:	e000e188 	.word	0xe000e188

08001088 <I2C_PeripheralControl>:
 * @return            - none
 *
 * @Note              - none
 *****************************************************************************************************/
void I2C_PeripheralControl(I2C_Handle_t *pI2CHandle, uint8_t EnorDis)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == ENABLE)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d113      	bne.n	80010c2 <I2C_PeripheralControl+0x3a>
	{
		pI2CHandle->pI2Cx->I2C_CR1 |= (1 << I2C_CR1_PE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0201 	orr.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
		pI2CHandle->pI2Cx->I2C_CR1 |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7a5b      	ldrb	r3, [r3, #9]
 80010b4:	029b      	lsls	r3, r3, #10
 80010b6:	4619      	mov	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
	}
	else if(EnorDis == DISABLE)
		pI2CHandle->pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
}
 80010c0:	e00a      	b.n	80010d8 <I2C_PeripheralControl+0x50>
	else if(EnorDis == DISABLE)
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d107      	bne.n	80010d8 <I2C_PeripheralControl+0x50>
		pI2CHandle->pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <I2C_SlaveSendData>:
	return state;
}


void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx, uint8_t data)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
	pI2Cx->I2C_DR = data;
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	611a      	str	r2, [r3, #16]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <I2C_SlaveReceiveData>:
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	return (uint8_t) pI2Cx->I2C_DR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	b2db      	uxtb	r3, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <I2C_EV_IRQHandling>:


void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = (pI2CHandle->pI2Cx->I2C_CR2 & (1 << I2C_CR2_ITEVTEN));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001128:	617b      	str	r3, [r7, #20]
	temp2 = (pI2CHandle->pI2Cx->I2C_CR2 & (1 << I2C_CR2_ITBUFEN));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001134:	613b      	str	r3, [r7, #16]
	temp3 = I2C_GetFLagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2101      	movs	r1, #1
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fef9 	bl	8000f34 <I2C_GetFLagStatus>
 8001142:	4603      	mov	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]

	//1. Handle for Interrupt generated by SB event
	//	 Note: SB flag is only applicable in Master mode
	if(temp1 && temp3)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d02d      	beq.n	80011a8 <I2C_EV_IRQHandling+0x92>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d02a      	beq.n	80011a8 <I2C_EV_IRQHandling+0x92>
	{
		//The interrupt is generated because of SB event
		//This block will not be executed in slave mode because SB for slave is always zero

		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7f1b      	ldrb	r3, [r3, #28]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d11a      	bne.n	8001190 <I2C_EV_IRQHandling+0x7a>
		{
			if(pI2CHandle->RxSize == 2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d10d      	bne.n	800117e <I2C_EV_IRQHandling+0x68>
			{
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fca7 	bl	8000abc <I2C_ManageAcking>
				pI2CHandle->pI2Cx->I2C_CR1 |= (1 << I2C_CR1_POS);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800117c:	601a      	str	r2, [r3, #0]
			}
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7f5b      	ldrb	r3, [r3, #29]
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f7ff fcb5 	bl	8000af8 <I2C_ExecuteAddressPhaseRead>
 800118e:	e00b      	b.n	80011a8 <I2C_EV_IRQHandling+0x92>
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7f1b      	ldrb	r3, [r3, #28]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d107      	bne.n	80011a8 <I2C_EV_IRQHandling+0x92>
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,pI2CHandle->DevAddr);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7f5b      	ldrb	r3, [r3, #29]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4610      	mov	r0, r2
 80011a4:	f7ff fcbd 	bl	8000b22 <I2C_ExecuteAddressPhaseWrite>
	}

	temp3 = I2C_GetFLagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fec0 	bl	8000f34 <I2C_GetFLagStatus>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
	//2. Handle for Interrupt generated by ADDR event
	//	 Note: when master mode - address is sent
	//	 Note: when slave  mode - address is matched with own address
	if(temp1 && temp3)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <I2C_EV_IRQHandling+0xb4>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <I2C_EV_IRQHandling+0xb4>
	{
		//The interrupt is generated because of ADDR event
		I2C_CLearADDRFLag(pI2CHandle);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fcc1 	bl	8000b4c <I2C_CLearADDRFLag>
	}

	temp3 = I2C_GetFLagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2104      	movs	r1, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff feaf 	bl	8000f34 <I2C_GetFLagStatus>
 80011d6:	4603      	mov	r3, r0
 80011d8:	60fb      	str	r3, [r7, #12]
	//3. Handle for Interrupt generated by BTF(Byte Transfer Finished) event
	if(temp1 && temp3)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d024      	beq.n	800122a <I2C_EV_IRQHandling+0x114>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d021      	beq.n	800122a <I2C_EV_IRQHandling+0x114>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7f1b      	ldrb	r3, [r3, #28]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d11d      	bne.n	800122a <I2C_EV_IRQHandling+0x114>
		{
			//make sure TXE is also set
			if(I2C_GetFLagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE) && pI2CHandle->TxLen == 0)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fe9d 	bl	8000f34 <I2C_GetFLagStatus>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d014      	beq.n	800122a <I2C_EV_IRQHandling+0x114>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d110      	bne.n	800122a <I2C_EV_IRQHandling+0x114>
			{
				//BTF and TXE = 1

				//1. Generate STOP condition
				if(pI2CHandle->Sr == I2C_STOP)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800120e:	2b01      	cmp	r3, #1
 8001210:	d104      	bne.n	800121c <I2C_EV_IRQHandling+0x106>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fe9f 	bl	8000f5a <I2C_GenerateStopCondition>

				//2. Reset all the member elements of the handle structure
				I2C_CloseSendData(pI2CHandle);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fccd 	bl	8000bbc <I2C_CloseSendData>

				//3. Notify the application about transmission complete
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8001222:	2100      	movs	r1, #0
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff f863 	bl	80002f0 <I2C_ApplicationEventCallback>

			}
		}
	}

	temp3 = I2C_GetFLagStatus(pI2CHandle->pI2Cx, I2C_FLAG_STOPF);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2110      	movs	r1, #16
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fe7f 	bl	8000f34 <I2C_GetFLagStatus>
 8001236:	4603      	mov	r3, r0
 8001238:	60fb      	str	r3, [r7, #12]
	//4. Handle for Interrupt generated by STOPF event
	//	 Note: Stop detection flag is applicable only in slave mode
	if(temp1 && temp3)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00c      	beq.n	800125a <I2C_EV_IRQHandling+0x144>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <I2C_EV_IRQHandling+0x144>
	{
		//STOPF flag is set

		//Clear the STOPF flag -> | 1)Read SR1 2)Write to CR1 |

		pI2CHandle->pI2Cx->I2C_CR1 |= 0x0000;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	601a      	str	r2, [r3, #0]

		//Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8001252:	2102      	movs	r1, #2
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff f84b 	bl	80002f0 <I2C_ApplicationEventCallback>
	}

	temp3 = I2C_GetFLagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fe67 	bl	8000f34 <I2C_GetFLagStatus>
 8001266:	4603      	mov	r3, r0
 8001268:	60fb      	str	r3, [r7, #12]
	//5. Handle for Interrupt generated by TXE event
	if(temp1 && temp2 && temp3)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02e      	beq.n	80012ce <I2C_EV_IRQHandling+0x1b8>
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d02b      	beq.n	80012ce <I2C_EV_IRQHandling+0x1b8>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d028      	beq.n	80012ce <I2C_EV_IRQHandling+0x1b8>
	{
		//check for device mode (if it is master)
		if(pI2CHandle->Mode == I2C_MODE_MASTER)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001282:	2b01      	cmp	r3, #1
 8001284:	d118      	bne.n	80012b8 <I2C_EV_IRQHandling+0x1a2>
		{
			//TxE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX && pI2CHandle->TxLen > 0)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7f1b      	ldrb	r3, [r3, #28]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d11f      	bne.n	80012ce <I2C_EV_IRQHandling+0x1b8>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d01b      	beq.n	80012ce <I2C_EV_IRQHandling+0x1b8>
			{
				//1. Load data into DR
				pI2CHandle->pI2Cx->I2C_DR = *(pI2CHandle->pTxBuffer);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	611a      	str	r2, [r3, #16]
				//2. Decrement TxLen
				pI2CHandle->TxLen--;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	615a      	str	r2, [r3, #20]
				//3. Increment TxBuffer address
				pI2CHandle->pTxBuffer++;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	e00a      	b.n	80012ce <I2C_EV_IRQHandling+0x1b8>
			}
		}else
		{
			//slave
			//make sure that the slave is really in transmitter mode
			if(pI2CHandle->pI2Cx->I2C_SR2 & (1 << I2C_SR2_TRA))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <I2C_EV_IRQHandling+0x1b8>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 80012c6:	2108      	movs	r1, #8
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff f811 	bl	80002f0 <I2C_ApplicationEventCallback>
		}
	}

	temp3 = I2C_GetFLagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe2d 	bl	8000f34 <I2C_GetFLagStatus>
 80012da:	4603      	mov	r3, r0
 80012dc:	60fb      	str	r3, [r7, #12]
	//6. Handle for Interrupt generated by RXNE event
	if(temp1 && temp2 && temp3)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80c7 	beq.w	8001474 <I2C_EV_IRQHandling+0x35e>
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80c3 	beq.w	8001474 <I2C_EV_IRQHandling+0x35e>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80bf 	beq.w	8001474 <I2C_EV_IRQHandling+0x35e>
	{

		//check device mode
		if(pI2CHandle->Mode == I2C_MODE_MASTER)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 80ae 	bne.w	800145e <I2C_EV_IRQHandling+0x348>
		{
			//device mode is master

			//RxNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX && pI2CHandle->RxLen > 0)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7f1b      	ldrb	r3, [r3, #28]
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 80b4 	bne.w	8001474 <I2C_EV_IRQHandling+0x35e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80af 	beq.w	8001474 <I2C_EV_IRQHandling+0x35e>
			{
				if(pI2CHandle->RxSize == 1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d10c      	bne.n	8001338 <I2C_EV_IRQHandling+0x222>
				{
					*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->I2C_DR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	701a      	strb	r2, [r3, #0]
					pI2CHandle->RxLen--;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	1e5a      	subs	r2, r3, #1
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
 8001336:	e070      	b.n	800141a <I2C_EV_IRQHandling+0x304>
				}
				else if(pI2CHandle->RxSize > 2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d937      	bls.n	80013b0 <I2C_EV_IRQHandling+0x29a>
				{
					if(pI2CHandle->RxLen == 3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b03      	cmp	r3, #3
 8001346:	d121      	bne.n	800138c <I2C_EV_IRQHandling+0x276>
					{
						//clear the ack bit
						I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fbb4 	bl	8000abc <I2C_ManageAcking>

						//read DR
						*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->I2C_DR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	701a      	strb	r2, [r3, #0]
						pI2CHandle->pRxBuffer++;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
						pI2CHandle->RxLen--;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	619a      	str	r2, [r3, #24]

						if(pI2CHandle->Sr == I2C_STOP)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800137c:	2b01      	cmp	r3, #1
 800137e:	d14c      	bne.n	800141a <I2C_EV_IRQHandling+0x304>
							I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fde8 	bl	8000f5a <I2C_GenerateStopCondition>
 800138a:	e046      	b.n	800141a <I2C_EV_IRQHandling+0x304>
					}
					else
					{
						//read DR
						*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->I2C_DR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
						pI2CHandle->pRxBuffer++;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	611a      	str	r2, [r3, #16]
						pI2CHandle->RxLen--;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
 80013ae:	e034      	b.n	800141a <I2C_EV_IRQHandling+0x304>
					}
				}
				else if(pI2CHandle->RxSize == 2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d130      	bne.n	800141a <I2C_EV_IRQHandling+0x304>
				{
					if(pI2CHandle->RxLen == 2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d11b      	bne.n	80013f8 <I2C_EV_IRQHandling+0x2e2>
					{
						if(pI2CHandle->Sr == I2C_STOP)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d104      	bne.n	80013d4 <I2C_EV_IRQHandling+0x2be>
							I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fdc3 	bl	8000f5a <I2C_GenerateStopCondition>

						//read DR
						*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->I2C_DR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
						pI2CHandle->pRxBuffer++;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
						pI2CHandle->RxLen--;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	1e5a      	subs	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
 80013f6:	e010      	b.n	800141a <I2C_EV_IRQHandling+0x304>
					}
					else
					{
						//read DR
						*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->I2C_DR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]
						pI2CHandle->pRxBuffer++;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	611a      	str	r2, [r3, #16]
						pI2CHandle->RxLen--;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
					}
				}

				if(pI2CHandle->RxLen == 0)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d128      	bne.n	8001474 <I2C_EV_IRQHandling+0x35e>
				{
					//close the I2C data reception and notify the application

					//1. generate the stop condition
					if(pI2CHandle->Sr == I2C_STOP && pI2CHandle->RxSize == 1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001428:	2b01      	cmp	r3, #1
 800142a:	d108      	bne.n	800143e <I2C_EV_IRQHandling+0x328>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d104      	bne.n	800143e <I2C_EV_IRQHandling+0x328>
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fd8e 	bl	8000f5a <I2C_GenerateStopCondition>

					//2 . Close the I2C rx
					I2C_CloseReceiveData(pI2CHandle);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fbde 	bl	8000c00 <I2C_CloseReceiveData>

					pI2CHandle->pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_POS);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001452:	601a      	str	r2, [r3, #0]

					//4. Notify the application
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8001454:	2101      	movs	r1, #1
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7fe ff4a 	bl	80002f0 <I2C_ApplicationEventCallback>
			//make sure that the slave is really in receiver mode
			if(!(pI2CHandle->pI2Cx->I2C_SR2 & (1 << I2C_SR2_TRA)))
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
		}
	}
}
 800145c:	e00a      	b.n	8001474 <I2C_EV_IRQHandling+0x35e>
			if(!(pI2CHandle->pI2Cx->I2C_SR2 & (1 << I2C_SR2_TRA)))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <I2C_EV_IRQHandling+0x35e>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 800146c:	2109      	movs	r1, #9
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7fe ff3e 	bl	80002f0 <I2C_ApplicationEventCallback>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <I2C_ER_IRQHandling>:
						#define I2C_ERROR_OVR   6
						#define I2C_ERROR_TIMEOUT 7

 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->I2C_CR2) & ( 1 << I2C_CR2_ITERREN);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1<< I2C_SR1_BERR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00e      	beq.n	80014c0 <I2C_ER_IRQHandling+0x44>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00b      	beq.n	80014c0 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_BERR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b6:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	    I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80014b8:	2103      	movs	r1, #3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7fe ff18 	bl	80002f0 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1 << I2C_SR1_ARLO );
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ca:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00e      	beq.n	80014f0 <I2C_ER_IRQHandling+0x74>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00b      	beq.n	80014f0 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_ARLO);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014e6:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 80014e8:	2104      	movs	r1, #4
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7fe ff00 	bl	80002f0 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1 << I2C_SR1_AF);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fa:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00e      	beq.n	8001520 <I2C_ER_IRQHandling+0xa4>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_AF);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001516:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001518:	2105      	movs	r1, #5
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7fe fee8 	bl	80002f0 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1 << I2C_SR1_OVR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00e      	beq.n	8001550 <I2C_ER_IRQHandling+0xd4>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_OVR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001546:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001548:	2106      	movs	r1, #6
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7fe fed0 	bl	80002f0 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00e      	beq.n	8001580 <I2C_ER_IRQHandling+0x104>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001576:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8001578:	2107      	movs	r1, #7
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe feb8 	bl	80002f0 <I2C_ApplicationEventCallback>
	}

}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <__libc_init_array>:
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	4d0d      	ldr	r5, [pc, #52]	; (80015c0 <__libc_init_array+0x38>)
 800158c:	4c0d      	ldr	r4, [pc, #52]	; (80015c4 <__libc_init_array+0x3c>)
 800158e:	1b64      	subs	r4, r4, r5
 8001590:	10a4      	asrs	r4, r4, #2
 8001592:	2600      	movs	r6, #0
 8001594:	42a6      	cmp	r6, r4
 8001596:	d109      	bne.n	80015ac <__libc_init_array+0x24>
 8001598:	4d0b      	ldr	r5, [pc, #44]	; (80015c8 <__libc_init_array+0x40>)
 800159a:	4c0c      	ldr	r4, [pc, #48]	; (80015cc <__libc_init_array+0x44>)
 800159c:	f000 f820 	bl	80015e0 <_init>
 80015a0:	1b64      	subs	r4, r4, r5
 80015a2:	10a4      	asrs	r4, r4, #2
 80015a4:	2600      	movs	r6, #0
 80015a6:	42a6      	cmp	r6, r4
 80015a8:	d105      	bne.n	80015b6 <__libc_init_array+0x2e>
 80015aa:	bd70      	pop	{r4, r5, r6, pc}
 80015ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b0:	4798      	blx	r3
 80015b2:	3601      	adds	r6, #1
 80015b4:	e7ee      	b.n	8001594 <__libc_init_array+0xc>
 80015b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ba:	4798      	blx	r3
 80015bc:	3601      	adds	r6, #1
 80015be:	e7f2      	b.n	80015a6 <__libc_init_array+0x1e>
 80015c0:	080016ec 	.word	0x080016ec
 80015c4:	080016ec 	.word	0x080016ec
 80015c8:	080016ec 	.word	0x080016ec
 80015cc:	080016f0 	.word	0x080016f0

080015d0 <memset>:
 80015d0:	4402      	add	r2, r0
 80015d2:	4603      	mov	r3, r0
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d100      	bne.n	80015da <memset+0xa>
 80015d8:	4770      	bx	lr
 80015da:	f803 1b01 	strb.w	r1, [r3], #1
 80015de:	e7f9      	b.n	80015d4 <memset+0x4>

080015e0 <_init>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	bf00      	nop
 80015e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015e6:	bc08      	pop	{r3}
 80015e8:	469e      	mov	lr, r3
 80015ea:	4770      	bx	lr

080015ec <_fini>:
 80015ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ee:	bf00      	nop
 80015f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f2:	bc08      	pop	{r3}
 80015f4:	469e      	mov	lr, r3
 80015f6:	4770      	bx	lr
